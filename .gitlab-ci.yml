---
variables:
  GIT_FETCH_EXTRA_FLAGS: --tags
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  DEBIAN_CI_IMAGE: "$CI_REGISTRY_IMAGE:debian"
  ROCKYLINUX8_CI_IMAGE: "$CI_REGISTRY_IMAGE:rockylinux8"
  DEBBUILD_CI_IMAGE: "$CI_REGISTRY_IMAGE:debbuild"

stages:
  - build
  - test
  - publish

cache:
  paths:
    - .cache/pip

lint:
  stage: test
  except:
    - tags
  image: $DEBIAN_CI_IMAGE
  script:
    - tox -e lint

typing:
  stage: test
  except:
    - tags
  image: $DEBIAN_CI_IMAGE
  script:
    - tox -e typing

bandit:
  stage: test
  except:
    - tags
  image: $DEBIAN_CI_IMAGE
  script:
    - tox -e bandit

tests:
  stage: test
  except:
    - tags
  image: $CI_REGISTRY_IMAGE:$dist
  script:
    - tox -e tests-unit
    - tox -e tests-func -- -k 'not test_ansible'
    - tox -e tests-func -- -k 'test_ansible'
  parallel:
    matrix:
      - dist: [debian, rockylinux8]

docs:
  stage: test
  except:
    - tags
  image: $DEBIAN_CI_IMAGE
  script:
    - tox -e docs
  artifacts:
    paths: [docs/_build/]
    expire_in: 3 days

.ci_image:
  stage: build
  except:
    - tags
  image: docker:19.03-dind
  services:
    - docker:19.03-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd ci/$WORKSUBDIR
    - docker pull $IMAGE_TAG || true
    - docker build --pull --cache-from $IMAGE_TAG --tag $IMAGE_TAG -f $DOCKERFILE .
    - wget -O duuh https://github.com/philpep/duuh/releases/download/1.0/duuh-linux-amd64
    - chmod +x duuh
    - ./duuh -build $IMAGE_TAG
    - docker push $IMAGE_TAG

debian_ci_image:
  extends: .ci_image
  variables:
    IMAGE_TAG: "$CI_REGISTRY_IMAGE:debian"
    WORKSUBDIR: "testing"
    DOCKERFILE: "Dockerfile.debian"

rockylinux8_ci_image:
  extends: .ci_image
  variables:
    IMAGE_TAG: "$CI_REGISTRY_IMAGE:rockylinux8"
    WORKSUBDIR: "testing"
    DOCKERFILE: "Dockerfile.rockylinux8"

debbuild_ci_image:
  when: manual
  extends: .ci_image
  variables:
    IMAGE_TAG: "$CI_REGISTRY_IMAGE:debbuild"
    WORKSUBDIR: "debian"
    DOCKERFILE: "Dockerfile"

debian:
  when: manual
  stage: test
  image: $DEBBUILD_CI_IMAGE
  before_script:
    - sudo apt-get -qq update
    - sudo apt-get -qq build-dep .
    - python3 setup.py sdist
    - mk-origtargz dist/pglift-$(python3 setup.py --version).tar.gz
  script:
    - dpkg-buildpackage
    - debc
    - lintian

publish:
  only:
    - tags@dalibo/pglift
  stage: publish
  image: python:3
  before_script:
    - pip install twine
    - pip install build
  script:
    - git describe --exact-match
    - python3 -m build
    - python3 -m twine check dist/*
    - python3 -m twine upload dist/*
